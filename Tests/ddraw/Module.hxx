/*
Copyright (c) 2024 Eugene Kirian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "Base.hxx"

#define DIRECT_DRAW_LIBRARY_NAME "DDRAW.DLL"

#define DIRECT_DRAW_LIBRARY_PATH_LENGTH (MAX_PATH)
#define DIRECT_DRAW_LIBRARY_FILE_PATH_LENGTH (MAX_PATH + 100)

#define DIRECT_DRAW_ACQUIRE_DIRECT_DRAW_THREAD_LOCK_NAME "AcquireDDThreadLock"
#define DIRECT_DRAW_COMPLETE_CREATE_SYSTEM_MEMORY_SURFACE_NAME "CompleteCreateSysmemSurface"
#define DIRECT_DRAW_DIRECT_3D_PARSE_UNKNOWN_COMMAND_NAME "D3DParseUnknownCommand"
#define DIRECT_DRAW_DIRECT_DRAW_GET_ATTACHED_SURFACE_LOCAL_NAME "DDGetAttachedSurfaceLcl"
#define DIRECT_DRAW_DIRECT_DRAW_INTERNAL_LOCK_NAME "DDInternalLock"
#define DIRECT_DRAW_DIRECT_DRAW_INTERAL_UNLOCK_NAME "DDInternalUnlock"
#define DIRECT_DRAW_DIRECT_SOUND_HELP_NAME "DSoundHelp"
#define DIRECT_DRAW_DIRECT_DRAW_CREATE_NAME "DirectDrawCreate"
#define DIRECT_DRAW_DIRECT_DRAW_CREATE_CLIPPER_NAME "DirectDrawCreateClipper"
#define DIRECT_DRAW_DIRECT_DRAW_CREATE_EX_NAME "DirectDrawCreateEx"
#define DIRECT_DRAW_DIRECT_DRAW_ENUMERATE_A_NAME "DirectDrawEnumerateA"
#define DIRECT_DRAW_DIRECT_DRAW_ENUMERATE_EX_A_NAME "DirectDrawEnumerateExA"
#define DIRECT_DRAW_DIRECT_DRAW_ENUMERATE_EX_W_NAME "DirectDrawEnumerateExW"
#define DIRECT_DRAW_DIRECT_DRAW_ENUMERATE_W_NAME "DirectDrawEnumerateW"
#define DIRECT_DRAW_CAN_UNLOAD_NOW_NAME "DllCanUnloadNow"
#define DIRECT_DRAW_GET_CLASS_OBJECT_NAME "DllGetClassObject"
#define DIRECT_DRAW_GET_DIRECT_DRAW_SURFACE_LOCAL_NAME "GetDDSurfaceLocal"
#define DIRECT_DRAW_GET_OLE_THUNK_DATA_NAME "GetOLEThunkData"
#define DIRECT_DRAW_GET_SURFACE_FROM_DEVICE_CONTEXT_NAME "GetSurfaceFromDC"
#define DIRECT_DRAW_REGISTER_SPECIAL_CASE_NAME "RegisterSpecialCase"
#define DIRECT_DRAW_RELEASE_DIRECT_DRAW_THREAD_LOCK_NAME "ReleaseDDThreadLock"
#define DIRECT_DRAW_SET_APPLICATION_COMPATIBILITY_DATA_NAME "SetAppCompatData"

typedef struct _DDRAWI_DDRAWSURFACE_LCL FAR* LPDDRAWI_DDRAWSURFACE_LCL;
typedef struct _DDRAWI_DIRECTDRAW_LCL FAR* LPDDRAWI_DIRECTDRAW_LCL;

typedef VOID(WINAPI* LPACQUIREDIRECTDRAWTHREADLOCK)();
typedef BOOL(WINAPI* LPCOMPLETECREATESYSTEMMEMORYSURFACE)(LPDDRAWI_DDRAWSURFACE_LCL lpSurfLcl);
typedef HRESULT(WINAPI* LPDIRECT3DPARSEUNKNOWNCOMMAND)(LPVOID lpvCommands, LPVOID* lplpvReturnedCommand);
typedef HRESULT(WINAPI* LPDIRECTDRAWGETATTACHEDSURFACELOCAL)(LPDDRAWI_DDRAWSURFACE_LCL this_lcl, LPDDSCAPS2 lpDDSCaps, LPDDRAWI_DDRAWSURFACE_LCL* lplpDDAttachedSurfaceLcl);
typedef HRESULT(WINAPI* LPDIRECTDRAWINTERNALLOCK)(LPDDRAWI_DDRAWSURFACE_LCL this_lcl, LPVOID* lpBits);
typedef HRESULT(WINAPI* LPDIRECTDRAWINTERNALUNLOCK)(LPDDRAWI_DDRAWSURFACE_LCL this_lcl);
typedef HRESULT(WINAPI* LPDIRECTSOUNDHELP)(HWND hWnd, WNDPROC lpWndProc, DWORD pid);
typedef HRESULT(WINAPI* LPDIRECTDRAWCREATE)(GUID* lpGUID, LPDIRECTDRAW* lplpDD, IUnknown* pUnkOuter);
typedef HRESULT(WINAPI* LPDIRECTDRAWCREATECLIPPER)(DWORD dwFlags, LPDIRECTDRAWCLIPPER* lplpDDClipper, IUnknown* pUnkOuter);
typedef HRESULT(WINAPI* LPDIRECTDRAWCREATEEX)(GUID* lpGuid, LPVOID* lplpDD, REFIID iid, IUnknown* pUnkOuter);
typedef HRESULT(WINAPI* LPDIRECTDRAWENUMA)(LPDDENUMCALLBACKA lpCallback, LPVOID lpContext);
typedef HRESULT(WINAPI* LPDIRECTDRAWENUMERATEEXA)(LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
typedef HRESULT(WINAPI* LPDIRECTDRAWENUMERATEEXW)(LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
typedef HRESULT(WINAPI* LPDIRECTDRAWENUMW)(LPDDENUMCALLBACKW lpCallback, LPVOID lpContext);
typedef HRESULT(WINAPI* LPDLLCANUNLOADNOW)();
typedef HRESULT(WINAPI* LPDLLGETCLASSOBJECT)(REFCLSID rclsid, REFIID riid, LPVOID* ppv);
typedef LPDDRAWI_DDRAWSURFACE_LCL(WINAPI* LPGETDIRECTDRAWSURFACELOCAL)(LPDDRAWI_DIRECTDRAW_LCL this_lcl, DWORD handle, BOOL* isnew);
typedef ULONG_PTR(WINAPI* LPGETOLETHUNKDATA)(ULONG_PTR dwOrdinal);
typedef HRESULT(WINAPI* LPGETSURFACEFROMDEVICECONTEXT)(HDC hdc, LPDIRECTDRAWSURFACE* ppdds, HDC* phdcDriver);
typedef HRESULT(WINAPI* LPREGISTERSPECIALCASE)(DWORD dwParam1, DWORD dwParam2, DWORD dwParam3, DWORD dwParam4);
typedef VOID(WINAPI* LPRELEASEDIRECTDRAWTHREADLOCK)();
typedef HRESULT(WINAPI* LPSETAPPLICATIONCOMPATIBILITYDATA)(DWORD dwType, DWORD dwValue);

struct MODULE
{
    HMODULE Module;

    LPACQUIREDIRECTDRAWTHREADLOCK AcquireInternalLock;
    LPCOMPLETECREATESYSTEMMEMORYSURFACE CompleteCreateSysmemSurface;
    LPDIRECT3DPARSEUNKNOWNCOMMAND ParseUnknownCommand;
    LPDIRECTDRAWGETATTACHEDSURFACELOCAL GetAttachedSurfaceLocal;
    LPDIRECTDRAWINTERNALLOCK InternalLock;
    LPDIRECTDRAWINTERNALUNLOCK InternalUnlock;
    LPDIRECTSOUNDHELP DirectSoundHelp;
    LPDIRECTDRAWCREATE DirectDrawCreate;
    LPDIRECTDRAWCREATECLIPPER DirectDrawCreateClipper;
    LPDIRECTDRAWCREATEEX DirectDrawCreateEx;
    LPDIRECTDRAWENUMA DirectDrawEnumerateA;
    LPDIRECTDRAWENUMERATEEXA DirectDrawEnumerateExA;
    LPDIRECTDRAWENUMERATEEXW DirectDrawEnumerateExW;
    LPDIRECTDRAWENUMW DirectDrawEnumerateW;
    LPDLLCANUNLOADNOW DllCanUnloadNow;
    LPDLLGETCLASSOBJECT DllGetClassObject;
    LPGETDIRECTDRAWSURFACELOCAL GetDirectDrawSurfaceLocal;
    LPGETOLETHUNKDATA GetOLEThunkData;
    LPGETSURFACEFROMDEVICECONTEXT GetSurfaceFromDeviceContext;
    LPREGISTERSPECIALCASE RegisterSpecialCase;
    LPRELEASEDIRECTDRAWTHREADLOCK ReleaseThreadLock;
    LPSETAPPLICATIONCOMPATIBILITYDATA SetApplicationCompatibilityData;
};

typedef MODULE* LPMODULE;

LPMODULE InitializeModule(LPCSTR path);
BOOL ReleaseModule(LPMODULE module);